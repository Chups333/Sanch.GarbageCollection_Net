using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Sanch.GarbageCollection_Net
{
    class Program
    {
        static void Main(string[] args)
        {
            //два типи переменных
            //значимые и ссылочные
            //два типа памяти стек(ограничен по размеру но быстрее) и куча(оперативная память и медлнее)
            //значимые (int,char,bool) в стеке , в куче классы (типы данных) которые мы создаем сами
            //стек упорядоченный область памяти, то куча неупорядоченный 
            //new - определяет память в куче
            //сборка мусора  - три поколения ( работа с памятью ) провекра адресов и ссылок 
            //чеи больше объект сохраняется то его не надо удалять
            //GarbegCollection - работает не постоянно (очистка памяти) 
            //в стеке идет запись адресов в куче
            //два вида кучи - обычная куча и большая куча(больше 85 мб)
            //в большой куче нет перемещения - все в разброс
            //новый объект получает 0 поколение и GC проверяет сначала нулевое поколение
            //если объект пережил очистку ( на него была ссылка) то ему присваивается первое поколение
            //проверятется 1 поколения на которых нет ссылки  после если остались у кого есть ссылка то присваивается уже второе поколение
            //второе поколение максимальное







            //GC.Collect(); // чистка памяти - можно указать номер поколения
            //GC.GetTotalMemory(); // можно получить общий размер занятой памяти
            Console.WriteLine(GC.GetTotalMemory(false));
            for (int i = 0; i < 10000; i++)
            {
                var obj = (object)i;
                int j = (int)obj;

            }
            Console.WriteLine(GC.GetTotalMemory(false));
            GC.Collect();
            Console.WriteLine(GC.GetTotalMemory(false));
            Console.ReadKey();

            using(var c = new MyClass())
            {

            }


        }
    }
}
